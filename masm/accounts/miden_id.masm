use.miden::account
use.miden::note
use.std::sys

const.ALREADY_INITIALIZED="Already Initialized"
const.OWNER_SUFFIX_MISMATCH="Owner suffix mismatch"
const.OWNER_PREFIX_MISMATCH="Owner prefix mismatch"
const.NAME_ALREADY_REGISTERED="Name already registered"

# Storage
# 0: Initialized flag
# 1: Owner
# 2: Payment Token
# 3: Name -> ID map
# 4: ID -> Name map

# Input: [token_prefix, token_suffix]
# Output: []
export.init
    exec._assert_initialized
    # [token_prefix, token_suffix]
    exec._set_initialized
    # [token_prefix, token_suffix]
    exec.note::get_sender
    # [owner_prefix, owner_suffix, token_prefix, token_suffix]
    exec._update_owner
    # [token_prefix, token_suffix]
    exec._set_payment_token
end

# Input: [NAME]
# Output: []
proc._assert_name_not_registered
    push.3
    # [3, NAME]
    exec.account::get_map_item
    # [VALUE]
    push.0.0.0.0
    # [VALUE, ZERO_WORD]
    eqw
    # [0 or 1, VALUE, ZERO_WORD]
    assertz.err=NAME_ALREADY_REGISTERED
    # [VALUE, ZERO_WORD]
    dropw dropw
    # []
end


# Input: []
# Output: []
proc._assert_initialized
    push.0
    # [0]
    exec.account::get_item
    # [INITIALIZED_FLAG]
    drop drop drop
    # [initialized_flag]
    assertz.err=ALREADY_INITIALIZED
    # []
end

# Input: []
# Output: []
proc._set_initialized
    push.0.0.0.1
    # [0, 0, 0, 1]
    push.0
    # [0, 0, 0, 0, 1]
    debug.stack
    exec.account::set_item
    # [OLD_WORD]
    dropw
end

# Input: [owner_prefix, owner_suffix]
# Output: []
proc._update_owner
    push.0.0
    # [0, 0, owner_prefix, owner_suffix]
    push.1
    # [1, 0, 0, owner_prefix, owner_suffix]
    debug.stack
    exec.account::set_item
    # [OLD_VALUE]
    dropw
end

# Input: []
# Output: []
proc._assert_only_owner
    exec.note::get_sender
    # [sender_prefix, sender_suffix]
    push.1
    # [1, sender_prefix, sender_suffix]
    exec.account::get_item
    # [OWNER_WORD, sender_prefix, sender_suffix]
    drop drop
    # [owner_prefix, owner_suffix, sender_prefix, sender_suffix]
    swap.4
    # [sender_suffix, owner_suffix, sender_prefix, owner_prefix]
    assert_eq.err=OWNER_SUFFIX_MISMATCH
    assert_eq.err=OWNER_PREFIX_MISMATCH
    # []
end

# Input: [token_prefix, token_suffix]
# Output: []
proc._set_payment_token
    push.0.0
    # [0, 0, token_prefix, token_suffix]
    push.2
    # [2, 0, 0, token_prefix, token_suffix]
    exec.account::set_item
    dropw
end